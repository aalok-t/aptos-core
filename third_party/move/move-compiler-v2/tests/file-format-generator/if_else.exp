============ initial bytecode ================

[variant baseline]
fun if_else::if_else($t0: bool, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: if ($t0) goto 1 else goto 5
  1: label L0
  2: $t3 := 1
  3: $t2 := +($t1, $t3)
  4: goto 8
  5: label L1
  6: $t4 := 1
  7: $t2 := -($t1, $t4)
  8: label L2
  9: return $t2
}


[variant baseline]
fun if_else::if_else_nested($t0: bool, $t1: u64): u64 {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: if ($t0) goto 1 else goto 5
  1: label L0
  2: $t5 := 1
  3: $t4 := +($t1, $t5)
  4: goto 8
  5: label L1
  6: $t6 := 1
  7: $t4 := -($t1, $t6)
  8: label L2
  9: $t7 := 10
 10: $t3 := >($t4, $t7)
 11: if ($t3) goto 12 else goto 16
 12: label L3
 13: $t8 := 2
 14: $t2 := *($t1, $t8)
 15: goto 19
 16: label L4
 17: $t9 := 2
 18: $t2 := /($t1, $t9)
 19: label L5
 20: return $t2
}


============ disassembled file-format ==================
// Move bytecode v6
module 42.if_else {


if_else(Arg0: bool, Arg1: u64): u64 {
L0:	loc2: u64
B0:
	0: CopyLoc[0](Arg0: bool)
	1: BrFalse(9)
B1:
	2: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	3: StLoc[2](loc0: u64)
	4: CopyLoc[1](Arg1: u64)
	5: CopyLoc[2](loc0: u64)
	6: Add
	7: Branch(14)
B2:
	8: StLoc[3](loc1: u64)
B3:
	9: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	10: StLoc[4](loc2: u64)
	11: CopyLoc[1](Arg1: u64)
	12: CopyLoc[4](loc2: u64)
	13: Sub
B4:
	14: Ret
}
if_else_nested(Arg0: bool, Arg1: u64): u64 {
L0:	loc2: u64
L1:	loc3: u64
L2:	loc4: u64
L3:	loc5: u64
B0:
	0: CopyLoc[0](Arg0: bool)
	1: BrFalse(9)
B1:
	2: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	3: StLoc[2](loc0: u64)
	4: CopyLoc[1](Arg1: u64)
	5: CopyLoc[2](loc0: u64)
	6: Add
	7: Branch(14)
B2:
	8: StLoc[3](loc1: u64)
B3:
	9: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	10: StLoc[4](loc2: u64)
	11: CopyLoc[1](Arg1: u64)
	12: CopyLoc[4](loc2: u64)
	13: Sub
B4:
	14: LdConst[1](U64: [10, 0, 0, 0, 0, 0, 0, 0])
	15: Gt
	16: BrFalse(24)
B5:
	17: LdConst[2](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	18: StLoc[5](loc3: u64)
	19: CopyLoc[1](Arg1: u64)
	20: CopyLoc[5](loc3: u64)
	21: Mul
	22: Branch(29)
B6:
	23: StLoc[6](loc4: u64)
B7:
	24: LdConst[2](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	25: StLoc[7](loc5: u64)
	26: CopyLoc[1](Arg1: u64)
	27: CopyLoc[7](loc5: u64)
	28: Div
B8:
	29: Ret
}
}
